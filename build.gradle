plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	mavenCentral()
	maven {
		name 'm2-dv8tion'
		url 'https://m2.dv8tion.net/releases'
	}
}

configurations {
	includeTransitive
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation("net.dv8tion:JDA:${project.jda_version}"){
		exclude module: 'opus-java'
	}
	includeTransitive implementation("net.dv8tion:JDA:${project.jda_version}"){
		exclude module: 'opus-java'
	}

	/*api("com.google.code.findbugs:jsr305:3.0.2")
	include("com.google.code.findbugs:jsr305:3.0.2")
	api("org.jetbrains:annotations:23.0.0")
	include("org.jetbrains:annotations:23.0.0")

	//Logger
	api("org.slf4j:slf4j-api:1.7.36")
	include("org.slf4j:slf4j-api:1.7.36")

	//Web Connection Support
	api("com.neovisionaries:nv-websocket-client:2.14")
	include("com.neovisionaries:nv-websocket-client:2.14")

	api("com.squareup.okhttp3:okhttp:4.9.3"){
		transitive = true
	}
	include("com.squareup.okhttp3:okhttp:4.9.3"){
		transitive = true
	}

	//Opus library support
	api("club.minnced:opus-java:1.1.1")
	include("club.minnced:opus-java:1.1.1")

	//Collections Utility
	api("org.apache.commons:commons-collections4:4.4")
	include("org.apache.commons:commons-collections4:4.4")

	//we use this only together with opus-java
	// if that dependency is excluded it also doesn't need jna anymore
	// since jna is a transitive runtime dependency of opus-java we don't include it explicitly as dependency
	compileOnly("net.java.dev.jna:jna:4.4.0")
	include("net.java.dev.jna:jna:4.4.0")

	/* Internal dependencies

	//General Utility
	implementation("net.sf.trove4j:trove4j:3.0.3")
	include("net.sf.trove4j:trove4j:3.0.3")
	// Match the minor version of lavaplayers jackson dependency
	implementation("com.fasterxml.jackson.core:jackson-core:2.13.2")
	include("com.fasterxml.jackson.core:jackson-core:2.13.2")
	implementation("com.fasterxml.jackson.core:jackson-databind:2.13.2.2")
	include("com.fasterxml.jackson.core:jackson-databind:2.13.2.2")

	testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
	include("org.junit.jupiter:junit-jupiter:5.8.2")

	implementation group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: '1.6.21'
	include group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: '1.6.21'*/
}

configurations.getByName("includeTransitive").resolvedConfiguration.resolvedArtifacts.forEach(dep -> {
	if (!dep.id.componentIdentifier.displayName.contains("slf4j-api"))
		dependencies.add("include", dep.id.componentIdentifier.displayName)
})

processResources {
	inputs.property "version", project.version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
